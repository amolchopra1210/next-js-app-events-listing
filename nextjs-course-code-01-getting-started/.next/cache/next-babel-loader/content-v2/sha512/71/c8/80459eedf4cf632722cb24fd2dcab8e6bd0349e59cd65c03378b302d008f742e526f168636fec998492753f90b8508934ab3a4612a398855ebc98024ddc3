{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/amolchopra/Desktop/Projects/next-app/nextjs-course-code-01-getting-started/pages/events/[...slug].js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport useSWR from \"swr\";\nimport EventList from \"../../components/events/event-list\";\nimport { getFilteredEvents } from \"../../helpers/api-utils\";\nexport default function FilteredEventsPage(props) {\n  const {\n    0: loadedEvents,\n    1: setLoadedEvents\n  } = useState();\n  const router = useRouter();\n  const filterData = router.query.slug;\n  useEffect(() => {\n    async function fetchData() {\n      const result = await fetch(\"https://nextjs-event-app-dda49-default-rtdb.firebaseio.com/events.json\");\n      const data = await result.json();\n\n      if (data) {\n        const events = [];\n\n        for (const key in data) {\n          events.push(_objectSpread({\n            id: key\n          }, data[key]));\n        }\n\n        setLoadedEvents(events);\n      }\n    }\n\n    fetchData();\n  }, [data]);\n\n  if (!loadedEvents) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"center\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (isNaN(numMonth) || isNaN(numYear) || numYear > 2030 || numYear < 2021 || numMonth < 1 || numMonth > 12 || error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"center\",\n      children: \"Invalid filter. Please try again\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n\n  const filteredYear = filterData[0];\n  const filteredMonth = filterData[1];\n  const numYear = +filteredYear;\n  const numMonth = +filteredMonth;\n  const filteredEvents = loadedEvents.filter(event => {\n    const eventDate = new Date(event.date);\n    return eventDate.getFullYear() === numYear && eventDate.getMonth() === numMonth - 1;\n  }); // const filteredEvents = props.events;\n\n  if (!filteredEvents || filteredEvents.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"center\",\n      children: \"No events found for this filter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(EventList, {\n      items: filteredEvents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n} // export async function getServerSideProps(context) {\n//   const { params } = context;\n//   const filterData = params.slug;\n//   const filteredYear = filterData[0];\n//   const filteredMonth = filterData[1];\n//   const numYear = +filteredYear;\n//   const numMonth = +filteredMonth;\n//   if (\n//     isNaN(numMonth) ||\n//     isNaN(numYear) ||\n//     numYear > 2030 ||\n//     numYear < 2021 ||\n//     numMonth < 1 ||\n//     numMonth > 12\n//   ) {\n//     return {\n//       props: {\n//         hasError: true,\n//       },\n//       //notFound: true,\n//       //redirect: {\n//       // destination: '/error'\n//     };\n//   }\n//   const filteredEvents = await getFilteredEvents({\n//     year: numYear,\n//     month: numMonth,\n//   });\n//   return {\n//     props: {\n//       events: filteredEvents,\n//       date: {\n//         year: numYear,\n//         month: numMonth,\n//       },\n//     },\n//   };\n// }","map":{"version":3,"sources":["/Users/amolchopra/Desktop/Projects/next-app/nextjs-course-code-01-getting-started/pages/events/[...slug].js"],"names":["useRouter","useEffect","useState","useSWR","EventList","getFilteredEvents","FilteredEventsPage","props","loadedEvents","setLoadedEvents","router","filterData","query","slug","fetchData","result","fetch","data","json","events","key","push","id","isNaN","numMonth","numYear","error","filteredYear","filteredMonth","filteredEvents","filter","event","eventDate","Date","date","getFullYear","getMonth","length"],"mappings":";;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,SAASC,iBAAT,QAAkC,yBAAlC;AAEA,eAAe,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAChD,QAAM;AAAA,OAACC,YAAD;AAAA,OAAeC;AAAf,MAAkCP,QAAQ,EAAhD;AACA,QAAMQ,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAMW,UAAU,GAAGD,MAAM,CAACE,KAAP,CAAaC,IAAhC;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAea,SAAf,GAA2B;AACzB,YAAMC,MAAM,GAAG,MAAMC,KAAK,CACxB,wEADwB,CAA1B;AAGA,YAAMC,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAnB;;AACA,UAAID,IAAJ,EAAU;AACR,cAAME,MAAM,GAAG,EAAf;;AACA,aAAK,MAAMC,GAAX,IAAkBH,IAAlB,EAAwB;AACtBE,UAAAA,MAAM,CAACE,IAAP;AACEC,YAAAA,EAAE,EAAEF;AADN,aAEKH,IAAI,CAACG,GAAD,CAFT;AAID;;AACDX,QAAAA,eAAe,CAACU,MAAD,CAAf;AACD;AACF;;AACDL,IAAAA,SAAS;AACV,GAlBQ,EAkBN,CAACG,IAAD,CAlBM,CAAT;;AAmBA,MAAI,CAACT,YAAL,EAAmB;AACjB,wBAAO;AAAG,MAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MACEe,KAAK,CAACC,QAAD,CAAL,IACAD,KAAK,CAACE,OAAD,CADL,IAEAA,OAAO,GAAG,IAFV,IAGAA,OAAO,GAAG,IAHV,IAIAD,QAAQ,GAAG,CAJX,IAKAA,QAAQ,GAAG,EALX,IAMAE,KAPF,EAQE;AACA,wBAAO;AAAG,MAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAMC,YAAY,GAAGhB,UAAU,CAAC,CAAD,CAA/B;AACA,QAAMiB,aAAa,GAAGjB,UAAU,CAAC,CAAD,CAAhC;AACA,QAAMc,OAAO,GAAG,CAACE,YAAjB;AACA,QAAMH,QAAQ,GAAG,CAACI,aAAlB;AAEA,QAAMC,cAAc,GAAGrB,YAAY,CAACsB,MAAb,CAAqBC,KAAD,IAAW;AACpD,UAAMC,SAAS,GAAG,IAAIC,IAAJ,CAASF,KAAK,CAACG,IAAf,CAAlB;AACA,WACEF,SAAS,CAACG,WAAV,OAA4BV,OAA5B,IACAO,SAAS,CAACI,QAAV,OAAyBZ,QAAQ,GAAG,CAFtC;AAID,GANsB,CAAvB,CA7CgD,CAqDhD;;AAEA,MAAI,CAACK,cAAD,IAAmBA,cAAc,CAACQ,MAAf,KAA0B,CAAjD,EAAoD;AAClD,wBAAO;AAAG,MAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBACE;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,KAAK,EAAER;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useRouter } from \"next/router\";\nimport { useEffect, useState } from \"react\";\nimport useSWR from \"swr\";\nimport EventList from \"../../components/events/event-list\";\nimport { getFilteredEvents } from \"../../helpers/api-utils\";\n\nexport default function FilteredEventsPage(props) {\n  const [loadedEvents, setLoadedEvents] = useState();\n  const router = useRouter();\n  const filterData = router.query.slug;\n\n  useEffect(() => {\n    async function fetchData() {\n      const result = await fetch(\n        \"https://nextjs-event-app-dda49-default-rtdb.firebaseio.com/events.json\"\n      );\n      const data = await result.json();\n      if (data) {\n        const events = [];\n        for (const key in data) {\n          events.push({\n            id: key,\n            ...data[key],\n          });\n        }\n        setLoadedEvents(events);\n      }\n    }\n    fetchData();\n  }, [data]);\n  if (!loadedEvents) {\n    return <p className=\"center\">Loading...</p>;\n  }\n\n  if (\n    isNaN(numMonth) ||\n    isNaN(numYear) ||\n    numYear > 2030 ||\n    numYear < 2021 ||\n    numMonth < 1 ||\n    numMonth > 12 ||\n    error\n  ) {\n    return <p className=\"center\">Invalid filter. Please try again</p>;\n  }\n\n  const filteredYear = filterData[0];\n  const filteredMonth = filterData[1];\n  const numYear = +filteredYear;\n  const numMonth = +filteredMonth;\n\n  const filteredEvents = loadedEvents.filter((event) => {\n    const eventDate = new Date(event.date);\n    return (\n      eventDate.getFullYear() === numYear &&\n      eventDate.getMonth() === numMonth - 1\n    );\n  });\n\n  // const filteredEvents = props.events;\n\n  if (!filteredEvents || filteredEvents.length === 0) {\n    return <p className=\"center\">No events found for this filter</p>;\n  }\n  return (\n    <div>\n      <EventList items={filteredEvents} />\n    </div>\n  );\n}\n\n// export async function getServerSideProps(context) {\n//   const { params } = context;\n//   const filterData = params.slug;\n//   const filteredYear = filterData[0];\n//   const filteredMonth = filterData[1];\n//   const numYear = +filteredYear;\n//   const numMonth = +filteredMonth;\n//   if (\n//     isNaN(numMonth) ||\n//     isNaN(numYear) ||\n//     numYear > 2030 ||\n//     numYear < 2021 ||\n//     numMonth < 1 ||\n//     numMonth > 12\n//   ) {\n//     return {\n//       props: {\n//         hasError: true,\n//       },\n//       //notFound: true,\n//       //redirect: {\n//       // destination: '/error'\n//     };\n//   }\n//   const filteredEvents = await getFilteredEvents({\n//     year: numYear,\n//     month: numMonth,\n//   });\n//   return {\n//     props: {\n//       events: filteredEvents,\n//       date: {\n//         year: numYear,\n//         month: numMonth,\n//       },\n//     },\n//   };\n// }\n"]},"metadata":{},"sourceType":"module"}