{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/amolchopra/Desktop/Projects/next-app/nextjs-course-code-01-getting-started/pages/events/[eventId].js\";\nimport { Fragment } from \"react\";\nimport EventSummary from \"../../components/event-detail/event-summary\";\nimport EventLogistics from \"../../components/event-detail/event-logistics\";\nimport EventContent from \"../../components/event-detail/event-content\";\nexport var __N_SSG = true;\nexport default function EventDetailPage(props) {\n  var event = props.selectedEvent;\n\n  if (!event) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No Event Found!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(EventSummary, {\n      title: event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventLogistics, {\n      date: event.date,\n      address: event.location,\n      image: event.image,\n      title: event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventContent, {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: event.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n_c = EventDetailPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"sources":["/Users/amolchopra/Desktop/Projects/next-app/nextjs-course-code-01-getting-started/pages/events/[eventId].js"],"names":["Fragment","EventSummary","EventLogistics","EventContent","EventDetailPage","props","event","selectedEvent","title","date","location","image","description"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAOC,YAAP,MAAyB,6CAAzB;AACA,OAAOC,cAAP,MAA2B,+CAA3B;AACA,OAAOC,YAAP,MAAyB,6CAAzB;;AAEA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC7C,MAAMC,KAAK,GAAGD,KAAK,CAACE,aAApB;;AACA,MAAI,CAACD,KAAL,EAAY;AACV,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEA,KAAK,CAACE;AAA3B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,cAAD;AACE,MAAA,IAAI,EAAEF,KAAK,CAACG,IADd;AAEE,MAAA,OAAO,EAAEH,KAAK,CAACI,QAFjB;AAGE,MAAA,KAAK,EAAEJ,KAAK,CAACK,KAHf;AAIE,MAAA,KAAK,EAAEL,KAAK,CAACE;AAJf;AAAA;AAAA;AAAA;AAAA,YAFF,eAQE,QAAC,YAAD;AAAA,6BACE;AAAA,kBAAIF,KAAK,CAACM;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;KAnBuBR,e","sourcesContent":["import { Fragment } from \"react\";\nimport { getEventById, getFeaturedEvents } from \"../../helpers/api-utils\";\nimport EventSummary from \"../../components/event-detail/event-summary\";\nimport EventLogistics from \"../../components/event-detail/event-logistics\";\nimport EventContent from \"../../components/event-detail/event-content\";\n\nexport default function EventDetailPage(props) {\n  const event = props.selectedEvent;\n  if (!event) {\n    return <p>No Event Found!</p>;\n  }\n  return (\n    <Fragment>\n      <EventSummary title={event.title} />\n      <EventLogistics\n        date={event.date}\n        address={event.location}\n        image={event.image}\n        title={event.title}\n      />\n      <EventContent>\n        <p>{event.description}</p>\n      </EventContent>\n    </Fragment>\n  );\n}\n\nexport async function getStaticProps(context) {\n  const eventId = context.params.eventId;\n  const event = await getEventById(eventId);\n  return {\n    props: {\n      selectedEvent: event,\n    },\n    revalidate: 30,\n  };\n}\n\nexport async function getStaticPaths() {\n  const events = await getFeaturedEvents();\n  const paths = events.map((event) => ({ params: { eventId: event.id } }));\n  return {\n    paths: paths,\n    fallback: false,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}